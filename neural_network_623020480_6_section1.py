# -*- coding: utf-8 -*-
"""Neural_Network_623020480-6_section1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1duD3aeZK_zd85EiD8STSZRpz3i68kIsx

# Neural Network

<img src="https://miro.medium.com/max/625/1*sX6T0Y4aa3ARh7IBS_sdqw.png">

# Import library
"""

import pandas as pd
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix

"""# Banknote dataset

## Get banknote data
https://github.com/Kuntal-G/Machine-Learning/tree/master/R-machine-learning/data
"""

banknote_data = pd.read_csv('https://raw.githubusercontent.com/Kuntal-G/Machine-Learning/master/R-machine-learning/data/banknote-authentication.csv')

banknote_data

"""## Extracting features & class labels"""

X = banknote_data.drop(columns='class')
y = banknote_data.drop(columns=['variance','skew','curtosis','entropy'])

X.shape, y.shape

"""## Neural Network classifier model"""

clf = MLPClassifier(hidden_layer_sizes=(1),learning_rate_init= 0.01, max_iter=300, random_state=42)

clf.fit(X, y)

y_pred = clf.predict(X)

accuracy_score(y, y_pred)

confusion_matrix(y, y_pred)

"""## Neural Networks from Scratch"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn import datasets
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

"""dataset จาก Banknote dataset"""

#ทำต่อจากตัวอย่าง
np.random.seed(0)
X, y = datasets.make_moons(100, noise=0.10)
x1 = X[:,0]
x2 = X[:,1]
plt.figure(figsize=(10,7))
plt.scatter(x1,x2, c=y, cmap=plt.cm.coolwarm)

#ทำต่อ
y = y.reshape(y.shape[0],1)

#ทำต่อ
print(X.shape)
print(y.shape)

#ทำต่อ
def define_parameters(weights):
  weight_list = []
  bias_list = []
  for i in range(len(weights) -1):
    w = np.random.randn(weights[i], weights[i+1])
    b = np.random.randn()

    weight_list.append(w)
    bias_list.append(b)
  return weight_list, bias_list

def sigmoid(x):
  return 1/(1+np.exp(-x))

def sigmoid_der(x):
  return sigmoid(x)*(1-sigmoid(x))

def predictions(w,b,X):
  zh = np.dot(X,w[0]) + b[0]
  ah = sigmoid(zh)

  zo = np.dot(ah,w[1]) + b[1]
  ao = sigmoid(zo)
  return ao

def find_cost(ao,y):
  m = y.shape[0]
  total_cost = (1/m) * np.sum(np.square(ao-y))
  return total_cost

def find_derivatives(w,b,X):
  zh = np.dot(X,w[0]) + b[0]
  ah = sigmoid(zh)

  zo = np.dot(ah,w[1]+ b[1])
  ao = sigmoid(zo)

  #Backpropagation phase 1
  m = y.shape[0]
  dcost_dao = (1/m)*(ao-y)
  dao_dzo = sigmoid_der(zo)
  dzo_dwo = ah.T
  dwo = np.dot(dzo_dwo, dcost_dao * dao_dzo)
  dbo = np.sum(dcost_dao * dao_dzo)

  #Backpropagation phase 2

  # dcost_wh = dcost_dah * dah_dzh * dzh_dwh
  # dcost_dah = dcost_dzo * dzo_dah
  dcost_dzo = dcost_dao * dao_dzo
  dzo_dah = w[1].T

  dcost_dah = np.dot(dcost_dzo,dzo_dah)

  dah_dzh = sigmoid_der(zh)
  dzh_dwh = X.T
  dwh = np.dot(dzh_dwh,dah_dzh * dcost_dah)
  dbh = np.sum(dah_dzh * dcost_dah)
  return dwh, dbh, dwo, dbo

def update_weights(w, b, dwh, dbh, dwo, dbo, lr):
  w[0] = w[0] - lr * dwh
  w[1] = w[1] - lr * dwo

  b[0] = b[0] - lr * dbh
  b[1] = b[1] - lr * dbo
  return w,b

def my_neural_network(X,y,lr,epochs):
  error_list = []
  input_len = X.shape[1]
  output_len = y.shape[1]
  w,b = define_parameters([input_len, 4, output_len])

  for i in range(epochs):
    ao = predictions(w, b, X)
    cost = find_cost(ao, y)
    error_list.append(cost)
    dwh, dbh, dwo, dbo = find_derivatives(w,b,X)
    w,b = update_weights(w, b, dwh, dbh, dwo, dbo, lr)
    if i % 50 == 0:
      print(cost)
  return w,b,error_list

lr = 0.5
epochs = 2000
w, b, error_list = my_neural_network(X, y, lr, epochs)

plt.plot(error_list)

"""```
สำหรับ COLAB
ตั้งชื่อเป็น Neural_Network_รหัสนักศึกษา_section.ipynb
เช่น Neural_Network_621234567-8_section1.ipynb
จากนั้นให้แชร์ share การเข้าถึงให้กับ Email
data313103@gmail.com
```
"""