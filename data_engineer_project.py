# -*- coding: utf-8 -*-
"""Data Engineer Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sMz3gs4HXnZPl4Zncl15y87BsdEmyfci

# คำถาม
แนวเกมที่นิยมในปัจจุบัน
เกมยอดยิตในปัจจุบัน
เกมที่ดีที่สุด
เกมที่ดีที่สุดตลอดกาล

## Import data
"""

from google.colab import drive
drive.mount('/content/drive')

"""# From json

Data 1
"""

import json
import pandas as pd

f_json = open('/content/drive/MyDrive/steam games/final_data_new.json')
data = json.load(f_json)
data_1 = pd.DataFrame(data)

data_1

"""# From API 2"""

!pip install steamspypi

import steamspypi
import pandas as pd

data = steamspypi.download_all_pages(num_pages=11)
data

data3 = pd.DataFrame(data)
data3 = data3.T
data3.to_json(r'/content/drive/MyDrive/steam games/data_3.json')

"""Need save"""

data_import = pd.read_json('/content/drive/MyDrive/steam games/data_3.json')
data_3 = data_import.copy()
data_3 = data_3.reset_index(drop=True)
data_3 = data_3.drop(columns=['userscore','average_2weeks','median_2weeks'])
data_3.isna().sum()



"""# Start

## get categories tags publisher developer
"""

#dataFrame.drop('pegi',inplace=True)
print(data_1.columns)
#print(data_2.columns)
print(data_3.columns)

data_1

data_1.dtypes

data_3

#check dublicated

data_3.dtypes

data_check = data_3[['name','appid']].copy()
result = pd.merge(data_check, data_1, how="left", on=["name", "name"])
result = result[result['appid'].duplicated() == False]
data_1 = result
data_1

publisher = data_3[['appid','publisher']]
publisher['publisher']

"""### Get categories and cleaning"""

import re
categories = data_1[['name','categories']].copy()
categories['categories']
categories['check'] = categories['categories'].astype(str)
#check 595 rec is empty
#drop nan
categories.dropna(inplace=True)
#check duplicate
#แยกเป็นหมวดๆ
categories = categories[categories['check'].duplicated() == False]
categories = categories.drop(columns=['check'])
categories_sucs = []
for i in categories['categories']:
  for j in i:
    if j not in categories_sucs:
      categories_sucs.append(j)
cate = pd.DataFrame({'categories':categories_sucs})
cate = cate.append({'categories' : 'NoneCategories'},ignore_index=True)
categories = cate
categories = categories.reset_index()
categories = categories.rename(columns={"index": "categories_id"})
categories



data_1['categories'][data_1['categories'].isna()] = list(['NoneCategories'])
data_1['categories'][data_1["categories"].str.len() == 0] = list(['NoneCategories'])
data_to_catagories = data_1.copy()
appid = []
categories_name = []
data_to_catagories = data_to_catagories.reset_index(drop=True)
for i in range(len(data_to_catagories['categories'])):
  if data_to_catagories['categories'][i] != 'NoneCategories':
    for j in range(len(data_to_catagories['categories'][i])):
      appid.append(data_to_catagories['appid'][i])
      categories_name.append(data_to_catagories['categories'][i][j])
  else:
      appid.append(data_to_catagories['appid'][i])
      categories_name.append(data_to_catagories['categories'][i])

#result_cate = pd.merge(data_check, data_1, how="left", on=["name", "name"])
data_cate = {'categories' : categories_name}
categories_for_merge = pd.DataFrame(data_cate)
categories_for_merge
result = pd.merge(categories_for_merge, categories, how="left", on=["categories", "categories"])
result['appid'] = appid
cate_to_app = result
cate_to_app = cate_to_app.drop(columns=['categories'])
cate_to_app

categories = categories.drop(columns=['categories_id'])
categories

cate_to_app.dtypes

categories.to_csv(r'/content/drive/MyDrive/steam games/success db/categories.csv')
cate_to_app.to_csv(r'/content/drive/MyDrive/steam games/success db/cate_to_games.csv')

"""### Get tags and cleaning"""

tags = data_1[['name','popu_tags']]
tags[tags['popu_tags'].isna()].head()

# DELECT TAGS
tags.dropna(inplace=True)
tags.reset_index(drop=True, inplace=True)
print(len(tags))

popula_tag = []
for i in range(len(tags)) :
    for j in tags['popu_tags'][i] :
      if j not in popula_tag :
        popula_tag.append(j)
print(len(popula_tag))

dict_tags = {'name_tags': popula_tag }
data_tags = pd.DataFrame(dict_tags)
data_tags

data_tags.dtypes

tmp_tags_appid = data_1[['appid','popu_tags']].copy()
tmp_tags_appid

tmp_tags_appid.dropna(inplace=True)
tmp_tags_appid.reset_index(drop=True, inplace=True)
print(len(tmp_tags_appid))

tmp_tags_id = []
tmp_appid = []
for i in range(len(tmp_tags_appid)):
  if type(tmp_tags_appid['popu_tags'][i]) == float:
    tmp_tags_id.append(1397)
  elif tmp_tags_appid['popu_tags'][i] == [] :
    tmp_tags_id.append(1397)
  else:
    for j in tmp_tags_appid['popu_tags'][i]:
      for k in range(len(popula_tag)) :
        if popula_tag[k] == j :
          tmp_appid.append(tmp_tags_appid['appid'][i])
          tmp_tags_id.append(k)
print(len(tmp_tags_id))

print(len(tmp_appid))
dict_tmp_id_tags ={'appid' : tmp_appid,
                   'id_poppu_tags' : tmp_tags_id }
data_tags_appid = pd.DataFrame(dict_tmp_id_tags)
data_tags_appid.head(10)

data_tags_appid.dtypes

data_tags.to_csv(r'/content/drive/MyDrive/steam games/success db/tags.csv')
data_tags_appid.to_csv(r'/content/drive/MyDrive/steam games/success db/tags_to_games.csv')

"""### Get developer and cleaning"""

developer = data_3[['appid','developer']].copy()

for i in range(len(developer)):
  developer['developer'][i] = developer['developer'][i].split(", ")
developer

dev_name = []
for i in range(len(developer)) :
    for j in developer['developer'][i] :
      if j not in dev_name :
        dev_name.append(j)
print(len(dev_name))

dict_developer = {'name_developer': dev_name}
data_developer = pd.DataFrame(dict_developer)
data_developer.head()

data_developer.dtypes

dev_name

tmp_dev_id = []
tmp_appid = []
for i in range(len(developer)):
    for j in developer['developer'][i]:
      for k in range(len(dev_name)) :
        if dev_name[k] == j :
          tmp_appid.append(developer['appid'][i])
          tmp_dev_id.append(k)
print(len(tmp_dev_id))

dict_tmp_id_dev ={'appid' : tmp_appid,
                   'id_dev' : tmp_dev_id }
data_dev_appid = pd.DataFrame(dict_tmp_id_dev)
data_dev_appid.head(10)

data_dev_appid.dtypes

data_developer.to_csv(r'/content/drive/MyDrive/steam games/success db/developers.csv')
data_dev_appid.to_csv(r'/content/drive/MyDrive/steam games/success db/dev_to_games.csv')

"""### Get publisher and cleaning"""

publisher = data_3[['appid','publisher']]
publisher

for i in range(len(publisher)):
  publisher['publisher'][i] = publisher['publisher'][i].split(", ")
publisher

publisher_name = []
for i in range(len(publisher)) :
    for j in publisher['publisher'][i] :
      if j not in publisher_name :
        publisher_name.append(j)
print(len(publisher_name))

dict_publisher = {'name_publisher': publisher_name }
data_publisher = pd.DataFrame(dict_publisher)
data_publisher.head()

data_publisher.dtypes

tmp_publis_id = []
tmp_appid = []
for i in range(len(publisher)):
    for j in publisher['publisher'][i]:
      for k in range(len(publisher_name)) :
        if publisher_name[k] == j :
          tmp_appid.append(publisher['appid'][i])
          tmp_publis_id.append(k)
print(len(tmp_publis_id))

dict_tmp_id_publis ={'appid' : tmp_appid,
                   'id_publis' : tmp_publis_id }
data_publis_appid = pd.DataFrame(dict_tmp_id_publis)
data_publis_appid.head(10)

data_publis_appid.dtypes

data_publisher.to_csv(r'/content/drive/MyDrive/steam games/success db/publisher.csv')
data_publis_appid.to_csv(r'/content/drive/MyDrive/steam games/success db/publis_to_games.csv')

"""### Get games and score"""

Data_Game_Steam = data_3[['appid','name','positive','negative','average_forever','ccu']].copy()
Data_Game_Steam

Data_Game_Steam.dtypes

Data_Game_Steam.to_csv(r'/content/drive/MyDrive/steam games/success db/games.csv')

"""# หาผลลัพธ์ตามวัตถุประสงค์

### catagories
"""

import matplotlib.pyplot as plt
import numpy as np
cate_to_app
dups_cate = cate_to_app.pivot_table(index=['categories_id'], aggfunc='size')
cate = pd.DataFrame(dups_cate.sort_values(ascending=False).head(10))
cate_plot = categories.copy()
cate_plot = cate_plot.reset_index()
cate_plot = cate_plot.rename(columns={"index": "categories_id"})
result_cate = pd.merge(cate, cate_plot, how="left", on=["categories_id", "categories_id"])
result_cate = result_cate.drop(columns="categories_id").head()

fig1, ax1 = plt.subplots()
ax1.pie(result_cate[0], labels=result_cate['categories'], autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

plt.show()

"""### tags"""

dups_tags = data_tags_appid.pivot_table(index=['id_poppu_tags'], aggfunc='size')
tags =  pd.DataFrame(dups_tags.sort_values(ascending=False).head(10))
tags_plot = data_tags.copy()
tags_plot = tags_plot.reset_index()
tags_plot = tags_plot.rename(columns={"index": "id_poppu_tags"})
result_tags = pd.merge(tags, tags_plot, how="left", on=["id_poppu_tags", "id_poppu_tags"])
result_tags = result_tags.drop(columns="id_poppu_tags").head()
fig1, ax1 = plt.subplots()
ax1.pie(result_tags[0], labels=result_tags['name_tags'], autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

"""### games forever"""

import seaborn as sns
games = Data_Game_Steam.head(5).copy()
games
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
games_name = games['name']
ccu = games['average_forever']
ax.bar(games_name,ccu)
plt.xticks(rotation='vertical',ticks=games_name)
plt.show()

"""### games ที่คนที่นิยม ณ ปัจจุบัน"""

games
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
games_name = games['name']
ccu = games['ccu']
ax.bar(games_name,ccu)
plt.xticks(rotation='vertical',ticks=games_name)
plt.show()

"""### Score"""

import matplotlib
import matplotlib.pyplot as plt
import numpy as np


labels = Data_Game_Steam['name'].head(5)
men_means = Data_Game_Steam['positive'].head(5)
women_means = Data_Game_Steam['negative'].head(5)

x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(x - width/2, men_means, width, label='Men')
rects2 = ax.bar(x + width/2, women_means, width, label='Women')

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Scores')
ax.set_title('Scores by group and gender')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend()



fig.tight_layout()
plt.xticks(rotation='vertical')
plt.show()